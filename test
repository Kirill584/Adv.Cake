
<?php
class Reverse{
    function revertCharacters($string) {
        $words = explode(" ", $string); 
        $result = '';
        foreach ($words as &$word) {
            $length = mb_strlen($word);
            $reversed_word = "";
            $punctuation = "";
            $f = 0;
            for ($i = 0; $i < $length; $i++) {
                $char = mb_substr($word, $i, 1);
                if (preg_match('/[^\p{L}]/u', $char)) {
                    $punctuation .= $char;
                } 
                else {
                    if (mb_strtolower($char) != $char){
                        $f = 1;
                        $char = mb_strtolower($char);
                    }
                    $reversed_word = $char . $reversed_word;
                }
            }
            if ($f == 1)
                $result .= mb_convert_case($reversed_word, MB_CASE_TITLE) . $punctuation . ' ';
            else
                $result .= $reversed_word . $punctuation . ' ';
        }
        return $result;
    }
}

$r = new Reverse();
echo $r->revertCharacters("Привет! Давно не виделись.");


class MyTests extends PHPUnit_Framework_TestCase {
    public function test1(){
        $r = new Reverse();
        $this->assertEquals('!   .   ?', $r->revertCharacters("!   .   ?"));
    }
    public function test2(){
        $r = new Reverse();
        $this->assertEquals('Ару!', $r->revertCharacters("Ура!"));
    }
    public function test3(){
        $r = new Reverse();
        $this->assertEquals('Тевирп, Яьзурд!', $r->revertCharacters("Привет, Друзья!"));
    }
    public function test4(){
        $r = new Reverse();
        $this->assertEquals('Тевирп, Dlrow!', $r->revertCharacters("Привет, World!"));
    }
}


 

